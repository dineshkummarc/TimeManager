using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Windows.Input;
using GalaSoft.MvvmLight;
using Microsoft.Practices.Prism.Commands;
using PatternLib;
using TimeManagerLib.Model;
using TimeManagerLib.ViewModel.Extension;

namespace TimeManagerLib.ViewModel
{
    public abstract class ATasksViewModel : ViewModelBase, IRefreashable
    {
        private ObservableCollection<TaskViewModel> _tasks;
        public ObservableCollection<TaskViewModel> Tasks
        {
            get { return _tasks; }
            private set
            {
                _tasks = value;
                RaisePropertyChanged("Tasks");
            }
        }

        public TaskViewModel Task { get; set; }

        public ATasksViewModel()
        {
            Tasks = new ObservableCollection<TaskViewModel>();
        }

        public abstract IList<Task> GetTasks(); 

        public void Refreash()
        {
            Tasks.Clear();

            foreach(var task in GetTasks())
            {
                Tasks.Add(new TaskViewModel(task));
            }
        }

        public ICommand DeleteTaskCommand
        {
            get
            {
                return new DelegateCommand(DeleteTask);
            }
        }

        private void DeleteTask()
        {
            try
            {
                if (Task != null)
                {
                    var repository = DependencyResolver.Resolve<ITimeManagerRepository>();
                    repository.DeleteTask(Task.Task);

                    Tasks.Remove(Task);
                }
            }
            catch (Exception ex)
            {
                ex.Show();
            }
        }
    }
}
